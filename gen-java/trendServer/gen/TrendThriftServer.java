/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package trendServer.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TrendThriftServer {

  public interface Iface {

    public long time() throws org.apache.thrift.TException;

    public List<TrendResult> currentTrendsDefault() throws org.apache.thrift.TException;

    public List<TrendResult> currentTrends(int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted) throws org.apache.thrift.TException;

    public List<TrendResult> trendsEndingAt(int unixEndAtTime, int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted) throws org.apache.thrift.TException;

    public void storeString(String stringToStore, int unixCreatedAtTime, int weeksAgoDataToExpire) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void time(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.time_call> resultHandler) throws org.apache.thrift.TException;

    public void currentTrendsDefault(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.currentTrendsDefault_call> resultHandler) throws org.apache.thrift.TException;

    public void currentTrends(int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.currentTrends_call> resultHandler) throws org.apache.thrift.TException;

    public void trendsEndingAt(int unixEndAtTime, int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.trendsEndingAt_call> resultHandler) throws org.apache.thrift.TException;

    public void storeString(String stringToStore, int unixCreatedAtTime, int weeksAgoDataToExpire, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.storeString_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long time() throws org.apache.thrift.TException
    {
      send_time();
      return recv_time();
    }

    public void send_time() throws org.apache.thrift.TException
    {
      time_args args = new time_args();
      sendBase("time", args);
    }

    public long recv_time() throws org.apache.thrift.TException
    {
      time_result result = new time_result();
      receiveBase(result, "time");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "time failed: unknown result");
    }

    public List<TrendResult> currentTrendsDefault() throws org.apache.thrift.TException
    {
      send_currentTrendsDefault();
      return recv_currentTrendsDefault();
    }

    public void send_currentTrendsDefault() throws org.apache.thrift.TException
    {
      currentTrendsDefault_args args = new currentTrendsDefault_args();
      sendBase("currentTrendsDefault", args);
    }

    public List<TrendResult> recv_currentTrendsDefault() throws org.apache.thrift.TException
    {
      currentTrendsDefault_result result = new currentTrendsDefault_result();
      receiveBase(result, "currentTrendsDefault");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "currentTrendsDefault failed: unknown result");
    }

    public List<TrendResult> currentTrends(int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted) throws org.apache.thrift.TException
    {
      send_currentTrends(spanInSeconds, minOccurrence, minLength, maxLength, top, dropBlacklisted, onlyWhitelisted);
      return recv_currentTrends();
    }

    public void send_currentTrends(int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted) throws org.apache.thrift.TException
    {
      currentTrends_args args = new currentTrends_args();
      args.setSpanInSeconds(spanInSeconds);
      args.setMinOccurrence(minOccurrence);
      args.setMinLength(minLength);
      args.setMaxLength(maxLength);
      args.setTop(top);
      args.setDropBlacklisted(dropBlacklisted);
      args.setOnlyWhitelisted(onlyWhitelisted);
      sendBase("currentTrends", args);
    }

    public List<TrendResult> recv_currentTrends() throws org.apache.thrift.TException
    {
      currentTrends_result result = new currentTrends_result();
      receiveBase(result, "currentTrends");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "currentTrends failed: unknown result");
    }

    public List<TrendResult> trendsEndingAt(int unixEndAtTime, int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted) throws org.apache.thrift.TException
    {
      send_trendsEndingAt(unixEndAtTime, spanInSeconds, minOccurrence, minLength, maxLength, top, dropBlacklisted, onlyWhitelisted);
      return recv_trendsEndingAt();
    }

    public void send_trendsEndingAt(int unixEndAtTime, int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted) throws org.apache.thrift.TException
    {
      trendsEndingAt_args args = new trendsEndingAt_args();
      args.setUnixEndAtTime(unixEndAtTime);
      args.setSpanInSeconds(spanInSeconds);
      args.setMinOccurrence(minOccurrence);
      args.setMinLength(minLength);
      args.setMaxLength(maxLength);
      args.setTop(top);
      args.setDropBlacklisted(dropBlacklisted);
      args.setOnlyWhitelisted(onlyWhitelisted);
      sendBase("trendsEndingAt", args);
    }

    public List<TrendResult> recv_trendsEndingAt() throws org.apache.thrift.TException
    {
      trendsEndingAt_result result = new trendsEndingAt_result();
      receiveBase(result, "trendsEndingAt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "trendsEndingAt failed: unknown result");
    }

    public void storeString(String stringToStore, int unixCreatedAtTime, int weeksAgoDataToExpire) throws org.apache.thrift.TException
    {
      send_storeString(stringToStore, unixCreatedAtTime, weeksAgoDataToExpire);
    }

    public void send_storeString(String stringToStore, int unixCreatedAtTime, int weeksAgoDataToExpire) throws org.apache.thrift.TException
    {
      storeString_args args = new storeString_args();
      args.setStringToStore(stringToStore);
      args.setUnixCreatedAtTime(unixCreatedAtTime);
      args.setWeeksAgoDataToExpire(weeksAgoDataToExpire);
      sendBase("storeString", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void time(org.apache.thrift.async.AsyncMethodCallback<time_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      time_call method_call = new time_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class time_call extends org.apache.thrift.async.TAsyncMethodCall {
      public time_call(org.apache.thrift.async.AsyncMethodCallback<time_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("time", org.apache.thrift.protocol.TMessageType.CALL, 0));
        time_args args = new time_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_time();
      }
    }

    public void currentTrendsDefault(org.apache.thrift.async.AsyncMethodCallback<currentTrendsDefault_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      currentTrendsDefault_call method_call = new currentTrendsDefault_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class currentTrendsDefault_call extends org.apache.thrift.async.TAsyncMethodCall {
      public currentTrendsDefault_call(org.apache.thrift.async.AsyncMethodCallback<currentTrendsDefault_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("currentTrendsDefault", org.apache.thrift.protocol.TMessageType.CALL, 0));
        currentTrendsDefault_args args = new currentTrendsDefault_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TrendResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_currentTrendsDefault();
      }
    }

    public void currentTrends(int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted, org.apache.thrift.async.AsyncMethodCallback<currentTrends_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      currentTrends_call method_call = new currentTrends_call(spanInSeconds, minOccurrence, minLength, maxLength, top, dropBlacklisted, onlyWhitelisted, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class currentTrends_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int spanInSeconds;
      private double minOccurrence;
      private int minLength;
      private int maxLength;
      private int top;
      private boolean dropBlacklisted;
      private boolean onlyWhitelisted;
      public currentTrends_call(int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted, org.apache.thrift.async.AsyncMethodCallback<currentTrends_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spanInSeconds = spanInSeconds;
        this.minOccurrence = minOccurrence;
        this.minLength = minLength;
        this.maxLength = maxLength;
        this.top = top;
        this.dropBlacklisted = dropBlacklisted;
        this.onlyWhitelisted = onlyWhitelisted;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("currentTrends", org.apache.thrift.protocol.TMessageType.CALL, 0));
        currentTrends_args args = new currentTrends_args();
        args.setSpanInSeconds(spanInSeconds);
        args.setMinOccurrence(minOccurrence);
        args.setMinLength(minLength);
        args.setMaxLength(maxLength);
        args.setTop(top);
        args.setDropBlacklisted(dropBlacklisted);
        args.setOnlyWhitelisted(onlyWhitelisted);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TrendResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_currentTrends();
      }
    }

    public void trendsEndingAt(int unixEndAtTime, int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted, org.apache.thrift.async.AsyncMethodCallback<trendsEndingAt_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      trendsEndingAt_call method_call = new trendsEndingAt_call(unixEndAtTime, spanInSeconds, minOccurrence, minLength, maxLength, top, dropBlacklisted, onlyWhitelisted, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class trendsEndingAt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int unixEndAtTime;
      private int spanInSeconds;
      private double minOccurrence;
      private int minLength;
      private int maxLength;
      private int top;
      private boolean dropBlacklisted;
      private boolean onlyWhitelisted;
      public trendsEndingAt_call(int unixEndAtTime, int spanInSeconds, double minOccurrence, int minLength, int maxLength, int top, boolean dropBlacklisted, boolean onlyWhitelisted, org.apache.thrift.async.AsyncMethodCallback<trendsEndingAt_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unixEndAtTime = unixEndAtTime;
        this.spanInSeconds = spanInSeconds;
        this.minOccurrence = minOccurrence;
        this.minLength = minLength;
        this.maxLength = maxLength;
        this.top = top;
        this.dropBlacklisted = dropBlacklisted;
        this.onlyWhitelisted = onlyWhitelisted;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("trendsEndingAt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        trendsEndingAt_args args = new trendsEndingAt_args();
        args.setUnixEndAtTime(unixEndAtTime);
        args.setSpanInSeconds(spanInSeconds);
        args.setMinOccurrence(minOccurrence);
        args.setMinLength(minLength);
        args.setMaxLength(maxLength);
        args.setTop(top);
        args.setDropBlacklisted(dropBlacklisted);
        args.setOnlyWhitelisted(onlyWhitelisted);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TrendResult> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_trendsEndingAt();
      }
    }

    public void storeString(String stringToStore, int unixCreatedAtTime, int weeksAgoDataToExpire, org.apache.thrift.async.AsyncMethodCallback<storeString_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      storeString_call method_call = new storeString_call(stringToStore, unixCreatedAtTime, weeksAgoDataToExpire, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class storeString_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String stringToStore;
      private int unixCreatedAtTime;
      private int weeksAgoDataToExpire;
      public storeString_call(String stringToStore, int unixCreatedAtTime, int weeksAgoDataToExpire, org.apache.thrift.async.AsyncMethodCallback<storeString_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.stringToStore = stringToStore;
        this.unixCreatedAtTime = unixCreatedAtTime;
        this.weeksAgoDataToExpire = weeksAgoDataToExpire;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("storeString", org.apache.thrift.protocol.TMessageType.CALL, 0));
        storeString_args args = new storeString_args();
        args.setStringToStore(stringToStore);
        args.setUnixCreatedAtTime(unixCreatedAtTime);
        args.setWeeksAgoDataToExpire(weeksAgoDataToExpire);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("time", new time());
      processMap.put("currentTrendsDefault", new currentTrendsDefault());
      processMap.put("currentTrends", new currentTrends());
      processMap.put("trendsEndingAt", new trendsEndingAt());
      processMap.put("storeString", new storeString());
      return processMap;
    }

    public static class time<I extends Iface> extends org.apache.thrift.ProcessFunction<I, time_args> {
      public time() {
        super("time");
      }

      public time_args getEmptyArgsInstance() {
        return new time_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public time_result getResult(I iface, time_args args) throws org.apache.thrift.TException {
        time_result result = new time_result();
        result.success = iface.time();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class currentTrendsDefault<I extends Iface> extends org.apache.thrift.ProcessFunction<I, currentTrendsDefault_args> {
      public currentTrendsDefault() {
        super("currentTrendsDefault");
      }

      public currentTrendsDefault_args getEmptyArgsInstance() {
        return new currentTrendsDefault_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public currentTrendsDefault_result getResult(I iface, currentTrendsDefault_args args) throws org.apache.thrift.TException {
        currentTrendsDefault_result result = new currentTrendsDefault_result();
        result.success = iface.currentTrendsDefault();
        return result;
      }
    }

    public static class currentTrends<I extends Iface> extends org.apache.thrift.ProcessFunction<I, currentTrends_args> {
      public currentTrends() {
        super("currentTrends");
      }

      public currentTrends_args getEmptyArgsInstance() {
        return new currentTrends_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public currentTrends_result getResult(I iface, currentTrends_args args) throws org.apache.thrift.TException {
        currentTrends_result result = new currentTrends_result();
        result.success = iface.currentTrends(args.spanInSeconds, args.minOccurrence, args.minLength, args.maxLength, args.top, args.dropBlacklisted, args.onlyWhitelisted);
        return result;
      }
    }

    public static class trendsEndingAt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, trendsEndingAt_args> {
      public trendsEndingAt() {
        super("trendsEndingAt");
      }

      public trendsEndingAt_args getEmptyArgsInstance() {
        return new trendsEndingAt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public trendsEndingAt_result getResult(I iface, trendsEndingAt_args args) throws org.apache.thrift.TException {
        trendsEndingAt_result result = new trendsEndingAt_result();
        result.success = iface.trendsEndingAt(args.unixEndAtTime, args.spanInSeconds, args.minOccurrence, args.minLength, args.maxLength, args.top, args.dropBlacklisted, args.onlyWhitelisted);
        return result;
      }
    }

    public static class storeString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, storeString_args> {
      public storeString() {
        super("storeString");
      }

      public storeString_args getEmptyArgsInstance() {
        return new storeString_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, storeString_args args) throws org.apache.thrift.TException {
        iface.storeString(args.stringToStore, args.unixCreatedAtTime, args.weeksAgoDataToExpire);
        return null;
      }
    }

  }

  public static class time_args implements org.apache.thrift.TBase<time_args, time_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("time_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new time_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new time_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(time_args.class, metaDataMap);
    }

    public time_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public time_args(time_args other) {
    }

    public time_args deepCopy() {
      return new time_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof time_args)
        return this.equals((time_args)that);
      return false;
    }

    public boolean equals(time_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(time_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      time_args typedOther = (time_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("time_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class time_argsStandardSchemeFactory implements SchemeFactory {
      public time_argsStandardScheme getScheme() {
        return new time_argsStandardScheme();
      }
    }

    private static class time_argsStandardScheme extends StandardScheme<time_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, time_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, time_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class time_argsTupleSchemeFactory implements SchemeFactory {
      public time_argsTupleScheme getScheme() {
        return new time_argsTupleScheme();
      }
    }

    private static class time_argsTupleScheme extends TupleScheme<time_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, time_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, time_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class time_result implements org.apache.thrift.TBase<time_result, time_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("time_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new time_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new time_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Timestamp")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(time_result.class, metaDataMap);
    }

    public time_result() {
    }

    public time_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public time_result(time_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public time_result deepCopy() {
      return new time_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public time_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof time_result)
        return this.equals((time_result)that);
      return false;
    }

    public boolean equals(time_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(time_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      time_result typedOther = (time_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("time_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class time_resultStandardSchemeFactory implements SchemeFactory {
      public time_resultStandardScheme getScheme() {
        return new time_resultStandardScheme();
      }
    }

    private static class time_resultStandardScheme extends StandardScheme<time_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, time_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, time_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class time_resultTupleSchemeFactory implements SchemeFactory {
      public time_resultTupleScheme getScheme() {
        return new time_resultTupleScheme();
      }
    }

    private static class time_resultTupleScheme extends TupleScheme<time_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, time_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, time_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class currentTrendsDefault_args implements org.apache.thrift.TBase<currentTrendsDefault_args, currentTrendsDefault_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("currentTrendsDefault_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new currentTrendsDefault_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new currentTrendsDefault_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(currentTrendsDefault_args.class, metaDataMap);
    }

    public currentTrendsDefault_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public currentTrendsDefault_args(currentTrendsDefault_args other) {
    }

    public currentTrendsDefault_args deepCopy() {
      return new currentTrendsDefault_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof currentTrendsDefault_args)
        return this.equals((currentTrendsDefault_args)that);
      return false;
    }

    public boolean equals(currentTrendsDefault_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(currentTrendsDefault_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      currentTrendsDefault_args typedOther = (currentTrendsDefault_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("currentTrendsDefault_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class currentTrendsDefault_argsStandardSchemeFactory implements SchemeFactory {
      public currentTrendsDefault_argsStandardScheme getScheme() {
        return new currentTrendsDefault_argsStandardScheme();
      }
    }

    private static class currentTrendsDefault_argsStandardScheme extends StandardScheme<currentTrendsDefault_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, currentTrendsDefault_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, currentTrendsDefault_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class currentTrendsDefault_argsTupleSchemeFactory implements SchemeFactory {
      public currentTrendsDefault_argsTupleScheme getScheme() {
        return new currentTrendsDefault_argsTupleScheme();
      }
    }

    private static class currentTrendsDefault_argsTupleScheme extends TupleScheme<currentTrendsDefault_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, currentTrendsDefault_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, currentTrendsDefault_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class currentTrendsDefault_result implements org.apache.thrift.TBase<currentTrendsDefault_result, currentTrendsDefault_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("currentTrendsDefault_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new currentTrendsDefault_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new currentTrendsDefault_resultTupleSchemeFactory());
    }

    public List<TrendResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrendResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(currentTrendsDefault_result.class, metaDataMap);
    }

    public currentTrendsDefault_result() {
    }

    public currentTrendsDefault_result(
      List<TrendResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public currentTrendsDefault_result(currentTrendsDefault_result other) {
      if (other.isSetSuccess()) {
        List<TrendResult> __this__success = new ArrayList<TrendResult>();
        for (TrendResult other_element : other.success) {
          __this__success.add(new TrendResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public currentTrendsDefault_result deepCopy() {
      return new currentTrendsDefault_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TrendResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TrendResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<TrendResult>();
      }
      this.success.add(elem);
    }

    public List<TrendResult> getSuccess() {
      return this.success;
    }

    public currentTrendsDefault_result setSuccess(List<TrendResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TrendResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof currentTrendsDefault_result)
        return this.equals((currentTrendsDefault_result)that);
      return false;
    }

    public boolean equals(currentTrendsDefault_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(currentTrendsDefault_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      currentTrendsDefault_result typedOther = (currentTrendsDefault_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("currentTrendsDefault_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class currentTrendsDefault_resultStandardSchemeFactory implements SchemeFactory {
      public currentTrendsDefault_resultStandardScheme getScheme() {
        return new currentTrendsDefault_resultStandardScheme();
      }
    }

    private static class currentTrendsDefault_resultStandardScheme extends StandardScheme<currentTrendsDefault_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, currentTrendsDefault_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<TrendResult>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    TrendResult _elem2; // required
                    _elem2 = new TrendResult();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, currentTrendsDefault_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TrendResult _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class currentTrendsDefault_resultTupleSchemeFactory implements SchemeFactory {
      public currentTrendsDefault_resultTupleScheme getScheme() {
        return new currentTrendsDefault_resultTupleScheme();
      }
    }

    private static class currentTrendsDefault_resultTupleScheme extends TupleScheme<currentTrendsDefault_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, currentTrendsDefault_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TrendResult _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, currentTrendsDefault_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TrendResult>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              TrendResult _elem7; // required
              _elem7 = new TrendResult();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class currentTrends_args implements org.apache.thrift.TBase<currentTrends_args, currentTrends_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("currentTrends_args");

    private static final org.apache.thrift.protocol.TField SPAN_IN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("spanInSeconds", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MIN_OCCURRENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("minOccurrence", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField MIN_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("minLength", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField MAX_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLength", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("top", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DROP_BLACKLISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("dropBlacklisted", org.apache.thrift.protocol.TType.BOOL, (short)6);
    private static final org.apache.thrift.protocol.TField ONLY_WHITELISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("onlyWhitelisted", org.apache.thrift.protocol.TType.BOOL, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new currentTrends_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new currentTrends_argsTupleSchemeFactory());
    }

    public int spanInSeconds; // required
    public double minOccurrence; // required
    public int minLength; // required
    public int maxLength; // required
    public int top; // required
    public boolean dropBlacklisted; // required
    public boolean onlyWhitelisted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPAN_IN_SECONDS((short)1, "spanInSeconds"),
      MIN_OCCURRENCE((short)2, "minOccurrence"),
      MIN_LENGTH((short)3, "minLength"),
      MAX_LENGTH((short)4, "maxLength"),
      TOP((short)5, "top"),
      DROP_BLACKLISTED((short)6, "dropBlacklisted"),
      ONLY_WHITELISTED((short)7, "onlyWhitelisted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPAN_IN_SECONDS
            return SPAN_IN_SECONDS;
          case 2: // MIN_OCCURRENCE
            return MIN_OCCURRENCE;
          case 3: // MIN_LENGTH
            return MIN_LENGTH;
          case 4: // MAX_LENGTH
            return MAX_LENGTH;
          case 5: // TOP
            return TOP;
          case 6: // DROP_BLACKLISTED
            return DROP_BLACKLISTED;
          case 7: // ONLY_WHITELISTED
            return ONLY_WHITELISTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SPANINSECONDS_ISSET_ID = 0;
    private static final int __MINOCCURRENCE_ISSET_ID = 1;
    private static final int __MINLENGTH_ISSET_ID = 2;
    private static final int __MAXLENGTH_ISSET_ID = 3;
    private static final int __TOP_ISSET_ID = 4;
    private static final int __DROPBLACKLISTED_ISSET_ID = 5;
    private static final int __ONLYWHITELISTED_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPAN_IN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("spanInSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MIN_OCCURRENCE, new org.apache.thrift.meta_data.FieldMetaData("minOccurrence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.MIN_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("minLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("maxLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP, new org.apache.thrift.meta_data.FieldMetaData("top", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DROP_BLACKLISTED, new org.apache.thrift.meta_data.FieldMetaData("dropBlacklisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ONLY_WHITELISTED, new org.apache.thrift.meta_data.FieldMetaData("onlyWhitelisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(currentTrends_args.class, metaDataMap);
    }

    public currentTrends_args() {
    }

    public currentTrends_args(
      int spanInSeconds,
      double minOccurrence,
      int minLength,
      int maxLength,
      int top,
      boolean dropBlacklisted,
      boolean onlyWhitelisted)
    {
      this();
      this.spanInSeconds = spanInSeconds;
      setSpanInSecondsIsSet(true);
      this.minOccurrence = minOccurrence;
      setMinOccurrenceIsSet(true);
      this.minLength = minLength;
      setMinLengthIsSet(true);
      this.maxLength = maxLength;
      setMaxLengthIsSet(true);
      this.top = top;
      setTopIsSet(true);
      this.dropBlacklisted = dropBlacklisted;
      setDropBlacklistedIsSet(true);
      this.onlyWhitelisted = onlyWhitelisted;
      setOnlyWhitelistedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public currentTrends_args(currentTrends_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.spanInSeconds = other.spanInSeconds;
      this.minOccurrence = other.minOccurrence;
      this.minLength = other.minLength;
      this.maxLength = other.maxLength;
      this.top = other.top;
      this.dropBlacklisted = other.dropBlacklisted;
      this.onlyWhitelisted = other.onlyWhitelisted;
    }

    public currentTrends_args deepCopy() {
      return new currentTrends_args(this);
    }

    @Override
    public void clear() {
      setSpanInSecondsIsSet(false);
      this.spanInSeconds = 0;
      setMinOccurrenceIsSet(false);
      this.minOccurrence = 0.0;
      setMinLengthIsSet(false);
      this.minLength = 0;
      setMaxLengthIsSet(false);
      this.maxLength = 0;
      setTopIsSet(false);
      this.top = 0;
      setDropBlacklistedIsSet(false);
      this.dropBlacklisted = false;
      setOnlyWhitelistedIsSet(false);
      this.onlyWhitelisted = false;
    }

    public int getSpanInSeconds() {
      return this.spanInSeconds;
    }

    public currentTrends_args setSpanInSeconds(int spanInSeconds) {
      this.spanInSeconds = spanInSeconds;
      setSpanInSecondsIsSet(true);
      return this;
    }

    public void unsetSpanInSeconds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPANINSECONDS_ISSET_ID);
    }

    /** Returns true if field spanInSeconds is set (has been assigned a value) and false otherwise */
    public boolean isSetSpanInSeconds() {
      return EncodingUtils.testBit(__isset_bitfield, __SPANINSECONDS_ISSET_ID);
    }

    public void setSpanInSecondsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPANINSECONDS_ISSET_ID, value);
    }

    public double getMinOccurrence() {
      return this.minOccurrence;
    }

    public currentTrends_args setMinOccurrence(double minOccurrence) {
      this.minOccurrence = minOccurrence;
      setMinOccurrenceIsSet(true);
      return this;
    }

    public void unsetMinOccurrence() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINOCCURRENCE_ISSET_ID);
    }

    /** Returns true if field minOccurrence is set (has been assigned a value) and false otherwise */
    public boolean isSetMinOccurrence() {
      return EncodingUtils.testBit(__isset_bitfield, __MINOCCURRENCE_ISSET_ID);
    }

    public void setMinOccurrenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINOCCURRENCE_ISSET_ID, value);
    }

    public int getMinLength() {
      return this.minLength;
    }

    public currentTrends_args setMinLength(int minLength) {
      this.minLength = minLength;
      setMinLengthIsSet(true);
      return this;
    }

    public void unsetMinLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLENGTH_ISSET_ID);
    }

    /** Returns true if field minLength is set (has been assigned a value) and false otherwise */
    public boolean isSetMinLength() {
      return EncodingUtils.testBit(__isset_bitfield, __MINLENGTH_ISSET_ID);
    }

    public void setMinLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLENGTH_ISSET_ID, value);
    }

    public int getMaxLength() {
      return this.maxLength;
    }

    public currentTrends_args setMaxLength(int maxLength) {
      this.maxLength = maxLength;
      setMaxLengthIsSet(true);
      return this;
    }

    public void unsetMaxLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLENGTH_ISSET_ID);
    }

    /** Returns true if field maxLength is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxLength() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXLENGTH_ISSET_ID);
    }

    public void setMaxLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLENGTH_ISSET_ID, value);
    }

    public int getTop() {
      return this.top;
    }

    public currentTrends_args setTop(int top) {
      this.top = top;
      setTopIsSet(true);
      return this;
    }

    public void unsetTop() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOP_ISSET_ID);
    }

    /** Returns true if field top is set (has been assigned a value) and false otherwise */
    public boolean isSetTop() {
      return EncodingUtils.testBit(__isset_bitfield, __TOP_ISSET_ID);
    }

    public void setTopIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOP_ISSET_ID, value);
    }

    public boolean isDropBlacklisted() {
      return this.dropBlacklisted;
    }

    public currentTrends_args setDropBlacklisted(boolean dropBlacklisted) {
      this.dropBlacklisted = dropBlacklisted;
      setDropBlacklistedIsSet(true);
      return this;
    }

    public void unsetDropBlacklisted() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DROPBLACKLISTED_ISSET_ID);
    }

    /** Returns true if field dropBlacklisted is set (has been assigned a value) and false otherwise */
    public boolean isSetDropBlacklisted() {
      return EncodingUtils.testBit(__isset_bitfield, __DROPBLACKLISTED_ISSET_ID);
    }

    public void setDropBlacklistedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DROPBLACKLISTED_ISSET_ID, value);
    }

    public boolean isOnlyWhitelisted() {
      return this.onlyWhitelisted;
    }

    public currentTrends_args setOnlyWhitelisted(boolean onlyWhitelisted) {
      this.onlyWhitelisted = onlyWhitelisted;
      setOnlyWhitelistedIsSet(true);
      return this;
    }

    public void unsetOnlyWhitelisted() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLYWHITELISTED_ISSET_ID);
    }

    /** Returns true if field onlyWhitelisted is set (has been assigned a value) and false otherwise */
    public boolean isSetOnlyWhitelisted() {
      return EncodingUtils.testBit(__isset_bitfield, __ONLYWHITELISTED_ISSET_ID);
    }

    public void setOnlyWhitelistedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLYWHITELISTED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SPAN_IN_SECONDS:
        if (value == null) {
          unsetSpanInSeconds();
        } else {
          setSpanInSeconds((Integer)value);
        }
        break;

      case MIN_OCCURRENCE:
        if (value == null) {
          unsetMinOccurrence();
        } else {
          setMinOccurrence((Double)value);
        }
        break;

      case MIN_LENGTH:
        if (value == null) {
          unsetMinLength();
        } else {
          setMinLength((Integer)value);
        }
        break;

      case MAX_LENGTH:
        if (value == null) {
          unsetMaxLength();
        } else {
          setMaxLength((Integer)value);
        }
        break;

      case TOP:
        if (value == null) {
          unsetTop();
        } else {
          setTop((Integer)value);
        }
        break;

      case DROP_BLACKLISTED:
        if (value == null) {
          unsetDropBlacklisted();
        } else {
          setDropBlacklisted((Boolean)value);
        }
        break;

      case ONLY_WHITELISTED:
        if (value == null) {
          unsetOnlyWhitelisted();
        } else {
          setOnlyWhitelisted((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SPAN_IN_SECONDS:
        return Integer.valueOf(getSpanInSeconds());

      case MIN_OCCURRENCE:
        return Double.valueOf(getMinOccurrence());

      case MIN_LENGTH:
        return Integer.valueOf(getMinLength());

      case MAX_LENGTH:
        return Integer.valueOf(getMaxLength());

      case TOP:
        return Integer.valueOf(getTop());

      case DROP_BLACKLISTED:
        return Boolean.valueOf(isDropBlacklisted());

      case ONLY_WHITELISTED:
        return Boolean.valueOf(isOnlyWhitelisted());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SPAN_IN_SECONDS:
        return isSetSpanInSeconds();
      case MIN_OCCURRENCE:
        return isSetMinOccurrence();
      case MIN_LENGTH:
        return isSetMinLength();
      case MAX_LENGTH:
        return isSetMaxLength();
      case TOP:
        return isSetTop();
      case DROP_BLACKLISTED:
        return isSetDropBlacklisted();
      case ONLY_WHITELISTED:
        return isSetOnlyWhitelisted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof currentTrends_args)
        return this.equals((currentTrends_args)that);
      return false;
    }

    public boolean equals(currentTrends_args that) {
      if (that == null)
        return false;

      boolean this_present_spanInSeconds = true;
      boolean that_present_spanInSeconds = true;
      if (this_present_spanInSeconds || that_present_spanInSeconds) {
        if (!(this_present_spanInSeconds && that_present_spanInSeconds))
          return false;
        if (this.spanInSeconds != that.spanInSeconds)
          return false;
      }

      boolean this_present_minOccurrence = true;
      boolean that_present_minOccurrence = true;
      if (this_present_minOccurrence || that_present_minOccurrence) {
        if (!(this_present_minOccurrence && that_present_minOccurrence))
          return false;
        if (this.minOccurrence != that.minOccurrence)
          return false;
      }

      boolean this_present_minLength = true;
      boolean that_present_minLength = true;
      if (this_present_minLength || that_present_minLength) {
        if (!(this_present_minLength && that_present_minLength))
          return false;
        if (this.minLength != that.minLength)
          return false;
      }

      boolean this_present_maxLength = true;
      boolean that_present_maxLength = true;
      if (this_present_maxLength || that_present_maxLength) {
        if (!(this_present_maxLength && that_present_maxLength))
          return false;
        if (this.maxLength != that.maxLength)
          return false;
      }

      boolean this_present_top = true;
      boolean that_present_top = true;
      if (this_present_top || that_present_top) {
        if (!(this_present_top && that_present_top))
          return false;
        if (this.top != that.top)
          return false;
      }

      boolean this_present_dropBlacklisted = true;
      boolean that_present_dropBlacklisted = true;
      if (this_present_dropBlacklisted || that_present_dropBlacklisted) {
        if (!(this_present_dropBlacklisted && that_present_dropBlacklisted))
          return false;
        if (this.dropBlacklisted != that.dropBlacklisted)
          return false;
      }

      boolean this_present_onlyWhitelisted = true;
      boolean that_present_onlyWhitelisted = true;
      if (this_present_onlyWhitelisted || that_present_onlyWhitelisted) {
        if (!(this_present_onlyWhitelisted && that_present_onlyWhitelisted))
          return false;
        if (this.onlyWhitelisted != that.onlyWhitelisted)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(currentTrends_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      currentTrends_args typedOther = (currentTrends_args)other;

      lastComparison = Boolean.valueOf(isSetSpanInSeconds()).compareTo(typedOther.isSetSpanInSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpanInSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanInSeconds, typedOther.spanInSeconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinOccurrence()).compareTo(typedOther.isSetMinOccurrence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinOccurrence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minOccurrence, typedOther.minOccurrence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinLength()).compareTo(typedOther.isSetMinLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLength, typedOther.minLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxLength()).compareTo(typedOther.isSetMaxLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLength, typedOther.maxLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTop()).compareTo(typedOther.isSetTop());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTop()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.top, typedOther.top);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDropBlacklisted()).compareTo(typedOther.isSetDropBlacklisted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDropBlacklisted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dropBlacklisted, typedOther.dropBlacklisted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOnlyWhitelisted()).compareTo(typedOther.isSetOnlyWhitelisted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOnlyWhitelisted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlyWhitelisted, typedOther.onlyWhitelisted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("currentTrends_args(");
      boolean first = true;

      sb.append("spanInSeconds:");
      sb.append(this.spanInSeconds);
      first = false;
      if (!first) sb.append(", ");
      sb.append("minOccurrence:");
      sb.append(this.minOccurrence);
      first = false;
      if (!first) sb.append(", ");
      sb.append("minLength:");
      sb.append(this.minLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxLength:");
      sb.append(this.maxLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("top:");
      sb.append(this.top);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dropBlacklisted:");
      sb.append(this.dropBlacklisted);
      first = false;
      if (!first) sb.append(", ");
      sb.append("onlyWhitelisted:");
      sb.append(this.onlyWhitelisted);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class currentTrends_argsStandardSchemeFactory implements SchemeFactory {
      public currentTrends_argsStandardScheme getScheme() {
        return new currentTrends_argsStandardScheme();
      }
    }

    private static class currentTrends_argsStandardScheme extends StandardScheme<currentTrends_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, currentTrends_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPAN_IN_SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.spanInSeconds = iprot.readI32();
                struct.setSpanInSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MIN_OCCURRENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.minOccurrence = iprot.readDouble();
                struct.setMinOccurrenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIN_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.minLength = iprot.readI32();
                struct.setMinLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MAX_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxLength = iprot.readI32();
                struct.setMaxLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TOP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.top = iprot.readI32();
                struct.setTopIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DROP_BLACKLISTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.dropBlacklisted = iprot.readBool();
                struct.setDropBlacklistedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ONLY_WHITELISTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.onlyWhitelisted = iprot.readBool();
                struct.setOnlyWhitelistedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, currentTrends_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SPAN_IN_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.spanInSeconds);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_OCCURRENCE_FIELD_DESC);
        oprot.writeDouble(struct.minOccurrence);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.minLength);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.maxLength);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_FIELD_DESC);
        oprot.writeI32(struct.top);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DROP_BLACKLISTED_FIELD_DESC);
        oprot.writeBool(struct.dropBlacklisted);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ONLY_WHITELISTED_FIELD_DESC);
        oprot.writeBool(struct.onlyWhitelisted);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class currentTrends_argsTupleSchemeFactory implements SchemeFactory {
      public currentTrends_argsTupleScheme getScheme() {
        return new currentTrends_argsTupleScheme();
      }
    }

    private static class currentTrends_argsTupleScheme extends TupleScheme<currentTrends_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, currentTrends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSpanInSeconds()) {
          optionals.set(0);
        }
        if (struct.isSetMinOccurrence()) {
          optionals.set(1);
        }
        if (struct.isSetMinLength()) {
          optionals.set(2);
        }
        if (struct.isSetMaxLength()) {
          optionals.set(3);
        }
        if (struct.isSetTop()) {
          optionals.set(4);
        }
        if (struct.isSetDropBlacklisted()) {
          optionals.set(5);
        }
        if (struct.isSetOnlyWhitelisted()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSpanInSeconds()) {
          oprot.writeI32(struct.spanInSeconds);
        }
        if (struct.isSetMinOccurrence()) {
          oprot.writeDouble(struct.minOccurrence);
        }
        if (struct.isSetMinLength()) {
          oprot.writeI32(struct.minLength);
        }
        if (struct.isSetMaxLength()) {
          oprot.writeI32(struct.maxLength);
        }
        if (struct.isSetTop()) {
          oprot.writeI32(struct.top);
        }
        if (struct.isSetDropBlacklisted()) {
          oprot.writeBool(struct.dropBlacklisted);
        }
        if (struct.isSetOnlyWhitelisted()) {
          oprot.writeBool(struct.onlyWhitelisted);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, currentTrends_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.spanInSeconds = iprot.readI32();
          struct.setSpanInSecondsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.minOccurrence = iprot.readDouble();
          struct.setMinOccurrenceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.minLength = iprot.readI32();
          struct.setMinLengthIsSet(true);
        }
        if (incoming.get(3)) {
          struct.maxLength = iprot.readI32();
          struct.setMaxLengthIsSet(true);
        }
        if (incoming.get(4)) {
          struct.top = iprot.readI32();
          struct.setTopIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dropBlacklisted = iprot.readBool();
          struct.setDropBlacklistedIsSet(true);
        }
        if (incoming.get(6)) {
          struct.onlyWhitelisted = iprot.readBool();
          struct.setOnlyWhitelistedIsSet(true);
        }
      }
    }

  }

  public static class currentTrends_result implements org.apache.thrift.TBase<currentTrends_result, currentTrends_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("currentTrends_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new currentTrends_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new currentTrends_resultTupleSchemeFactory());
    }

    public List<TrendResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrendResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(currentTrends_result.class, metaDataMap);
    }

    public currentTrends_result() {
    }

    public currentTrends_result(
      List<TrendResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public currentTrends_result(currentTrends_result other) {
      if (other.isSetSuccess()) {
        List<TrendResult> __this__success = new ArrayList<TrendResult>();
        for (TrendResult other_element : other.success) {
          __this__success.add(new TrendResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public currentTrends_result deepCopy() {
      return new currentTrends_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TrendResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TrendResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<TrendResult>();
      }
      this.success.add(elem);
    }

    public List<TrendResult> getSuccess() {
      return this.success;
    }

    public currentTrends_result setSuccess(List<TrendResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TrendResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof currentTrends_result)
        return this.equals((currentTrends_result)that);
      return false;
    }

    public boolean equals(currentTrends_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(currentTrends_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      currentTrends_result typedOther = (currentTrends_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("currentTrends_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class currentTrends_resultStandardSchemeFactory implements SchemeFactory {
      public currentTrends_resultStandardScheme getScheme() {
        return new currentTrends_resultStandardScheme();
      }
    }

    private static class currentTrends_resultStandardScheme extends StandardScheme<currentTrends_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, currentTrends_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<TrendResult>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    TrendResult _elem10; // required
                    _elem10 = new TrendResult();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, currentTrends_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TrendResult _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class currentTrends_resultTupleSchemeFactory implements SchemeFactory {
      public currentTrends_resultTupleScheme getScheme() {
        return new currentTrends_resultTupleScheme();
      }
    }

    private static class currentTrends_resultTupleScheme extends TupleScheme<currentTrends_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, currentTrends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TrendResult _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, currentTrends_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TrendResult>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              TrendResult _elem15; // required
              _elem15 = new TrendResult();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class trendsEndingAt_args implements org.apache.thrift.TBase<trendsEndingAt_args, trendsEndingAt_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("trendsEndingAt_args");

    private static final org.apache.thrift.protocol.TField UNIX_END_AT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("unixEndAtTime", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SPAN_IN_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("spanInSeconds", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MIN_OCCURRENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("minOccurrence", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField MIN_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("minLength", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MAX_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("maxLength", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("top", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField DROP_BLACKLISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("dropBlacklisted", org.apache.thrift.protocol.TType.BOOL, (short)7);
    private static final org.apache.thrift.protocol.TField ONLY_WHITELISTED_FIELD_DESC = new org.apache.thrift.protocol.TField("onlyWhitelisted", org.apache.thrift.protocol.TType.BOOL, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new trendsEndingAt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new trendsEndingAt_argsTupleSchemeFactory());
    }

    public int unixEndAtTime; // required
    public int spanInSeconds; // required
    public double minOccurrence; // required
    public int minLength; // required
    public int maxLength; // required
    public int top; // required
    public boolean dropBlacklisted; // required
    public boolean onlyWhitelisted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIX_END_AT_TIME((short)1, "unixEndAtTime"),
      SPAN_IN_SECONDS((short)2, "spanInSeconds"),
      MIN_OCCURRENCE((short)3, "minOccurrence"),
      MIN_LENGTH((short)4, "minLength"),
      MAX_LENGTH((short)5, "maxLength"),
      TOP((short)6, "top"),
      DROP_BLACKLISTED((short)7, "dropBlacklisted"),
      ONLY_WHITELISTED((short)8, "onlyWhitelisted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIX_END_AT_TIME
            return UNIX_END_AT_TIME;
          case 2: // SPAN_IN_SECONDS
            return SPAN_IN_SECONDS;
          case 3: // MIN_OCCURRENCE
            return MIN_OCCURRENCE;
          case 4: // MIN_LENGTH
            return MIN_LENGTH;
          case 5: // MAX_LENGTH
            return MAX_LENGTH;
          case 6: // TOP
            return TOP;
          case 7: // DROP_BLACKLISTED
            return DROP_BLACKLISTED;
          case 8: // ONLY_WHITELISTED
            return ONLY_WHITELISTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UNIXENDATTIME_ISSET_ID = 0;
    private static final int __SPANINSECONDS_ISSET_ID = 1;
    private static final int __MINOCCURRENCE_ISSET_ID = 2;
    private static final int __MINLENGTH_ISSET_ID = 3;
    private static final int __MAXLENGTH_ISSET_ID = 4;
    private static final int __TOP_ISSET_ID = 5;
    private static final int __DROPBLACKLISTED_ISSET_ID = 6;
    private static final int __ONLYWHITELISTED_ISSET_ID = 7;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIX_END_AT_TIME, new org.apache.thrift.meta_data.FieldMetaData("unixEndAtTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SPAN_IN_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("spanInSeconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MIN_OCCURRENCE, new org.apache.thrift.meta_data.FieldMetaData("minOccurrence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.MIN_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("minLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MAX_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("maxLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOP, new org.apache.thrift.meta_data.FieldMetaData("top", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DROP_BLACKLISTED, new org.apache.thrift.meta_data.FieldMetaData("dropBlacklisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ONLY_WHITELISTED, new org.apache.thrift.meta_data.FieldMetaData("onlyWhitelisted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(trendsEndingAt_args.class, metaDataMap);
    }

    public trendsEndingAt_args() {
    }

    public trendsEndingAt_args(
      int unixEndAtTime,
      int spanInSeconds,
      double minOccurrence,
      int minLength,
      int maxLength,
      int top,
      boolean dropBlacklisted,
      boolean onlyWhitelisted)
    {
      this();
      this.unixEndAtTime = unixEndAtTime;
      setUnixEndAtTimeIsSet(true);
      this.spanInSeconds = spanInSeconds;
      setSpanInSecondsIsSet(true);
      this.minOccurrence = minOccurrence;
      setMinOccurrenceIsSet(true);
      this.minLength = minLength;
      setMinLengthIsSet(true);
      this.maxLength = maxLength;
      setMaxLengthIsSet(true);
      this.top = top;
      setTopIsSet(true);
      this.dropBlacklisted = dropBlacklisted;
      setDropBlacklistedIsSet(true);
      this.onlyWhitelisted = onlyWhitelisted;
      setOnlyWhitelistedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trendsEndingAt_args(trendsEndingAt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.unixEndAtTime = other.unixEndAtTime;
      this.spanInSeconds = other.spanInSeconds;
      this.minOccurrence = other.minOccurrence;
      this.minLength = other.minLength;
      this.maxLength = other.maxLength;
      this.top = other.top;
      this.dropBlacklisted = other.dropBlacklisted;
      this.onlyWhitelisted = other.onlyWhitelisted;
    }

    public trendsEndingAt_args deepCopy() {
      return new trendsEndingAt_args(this);
    }

    @Override
    public void clear() {
      setUnixEndAtTimeIsSet(false);
      this.unixEndAtTime = 0;
      setSpanInSecondsIsSet(false);
      this.spanInSeconds = 0;
      setMinOccurrenceIsSet(false);
      this.minOccurrence = 0.0;
      setMinLengthIsSet(false);
      this.minLength = 0;
      setMaxLengthIsSet(false);
      this.maxLength = 0;
      setTopIsSet(false);
      this.top = 0;
      setDropBlacklistedIsSet(false);
      this.dropBlacklisted = false;
      setOnlyWhitelistedIsSet(false);
      this.onlyWhitelisted = false;
    }

    public int getUnixEndAtTime() {
      return this.unixEndAtTime;
    }

    public trendsEndingAt_args setUnixEndAtTime(int unixEndAtTime) {
      this.unixEndAtTime = unixEndAtTime;
      setUnixEndAtTimeIsSet(true);
      return this;
    }

    public void unsetUnixEndAtTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIXENDATTIME_ISSET_ID);
    }

    /** Returns true if field unixEndAtTime is set (has been assigned a value) and false otherwise */
    public boolean isSetUnixEndAtTime() {
      return EncodingUtils.testBit(__isset_bitfield, __UNIXENDATTIME_ISSET_ID);
    }

    public void setUnixEndAtTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIXENDATTIME_ISSET_ID, value);
    }

    public int getSpanInSeconds() {
      return this.spanInSeconds;
    }

    public trendsEndingAt_args setSpanInSeconds(int spanInSeconds) {
      this.spanInSeconds = spanInSeconds;
      setSpanInSecondsIsSet(true);
      return this;
    }

    public void unsetSpanInSeconds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPANINSECONDS_ISSET_ID);
    }

    /** Returns true if field spanInSeconds is set (has been assigned a value) and false otherwise */
    public boolean isSetSpanInSeconds() {
      return EncodingUtils.testBit(__isset_bitfield, __SPANINSECONDS_ISSET_ID);
    }

    public void setSpanInSecondsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPANINSECONDS_ISSET_ID, value);
    }

    public double getMinOccurrence() {
      return this.minOccurrence;
    }

    public trendsEndingAt_args setMinOccurrence(double minOccurrence) {
      this.minOccurrence = minOccurrence;
      setMinOccurrenceIsSet(true);
      return this;
    }

    public void unsetMinOccurrence() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINOCCURRENCE_ISSET_ID);
    }

    /** Returns true if field minOccurrence is set (has been assigned a value) and false otherwise */
    public boolean isSetMinOccurrence() {
      return EncodingUtils.testBit(__isset_bitfield, __MINOCCURRENCE_ISSET_ID);
    }

    public void setMinOccurrenceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINOCCURRENCE_ISSET_ID, value);
    }

    public int getMinLength() {
      return this.minLength;
    }

    public trendsEndingAt_args setMinLength(int minLength) {
      this.minLength = minLength;
      setMinLengthIsSet(true);
      return this;
    }

    public void unsetMinLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLENGTH_ISSET_ID);
    }

    /** Returns true if field minLength is set (has been assigned a value) and false otherwise */
    public boolean isSetMinLength() {
      return EncodingUtils.testBit(__isset_bitfield, __MINLENGTH_ISSET_ID);
    }

    public void setMinLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLENGTH_ISSET_ID, value);
    }

    public int getMaxLength() {
      return this.maxLength;
    }

    public trendsEndingAt_args setMaxLength(int maxLength) {
      this.maxLength = maxLength;
      setMaxLengthIsSet(true);
      return this;
    }

    public void unsetMaxLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXLENGTH_ISSET_ID);
    }

    /** Returns true if field maxLength is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxLength() {
      return EncodingUtils.testBit(__isset_bitfield, __MAXLENGTH_ISSET_ID);
    }

    public void setMaxLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXLENGTH_ISSET_ID, value);
    }

    public int getTop() {
      return this.top;
    }

    public trendsEndingAt_args setTop(int top) {
      this.top = top;
      setTopIsSet(true);
      return this;
    }

    public void unsetTop() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOP_ISSET_ID);
    }

    /** Returns true if field top is set (has been assigned a value) and false otherwise */
    public boolean isSetTop() {
      return EncodingUtils.testBit(__isset_bitfield, __TOP_ISSET_ID);
    }

    public void setTopIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOP_ISSET_ID, value);
    }

    public boolean isDropBlacklisted() {
      return this.dropBlacklisted;
    }

    public trendsEndingAt_args setDropBlacklisted(boolean dropBlacklisted) {
      this.dropBlacklisted = dropBlacklisted;
      setDropBlacklistedIsSet(true);
      return this;
    }

    public void unsetDropBlacklisted() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DROPBLACKLISTED_ISSET_ID);
    }

    /** Returns true if field dropBlacklisted is set (has been assigned a value) and false otherwise */
    public boolean isSetDropBlacklisted() {
      return EncodingUtils.testBit(__isset_bitfield, __DROPBLACKLISTED_ISSET_ID);
    }

    public void setDropBlacklistedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DROPBLACKLISTED_ISSET_ID, value);
    }

    public boolean isOnlyWhitelisted() {
      return this.onlyWhitelisted;
    }

    public trendsEndingAt_args setOnlyWhitelisted(boolean onlyWhitelisted) {
      this.onlyWhitelisted = onlyWhitelisted;
      setOnlyWhitelistedIsSet(true);
      return this;
    }

    public void unsetOnlyWhitelisted() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLYWHITELISTED_ISSET_ID);
    }

    /** Returns true if field onlyWhitelisted is set (has been assigned a value) and false otherwise */
    public boolean isSetOnlyWhitelisted() {
      return EncodingUtils.testBit(__isset_bitfield, __ONLYWHITELISTED_ISSET_ID);
    }

    public void setOnlyWhitelistedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLYWHITELISTED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNIX_END_AT_TIME:
        if (value == null) {
          unsetUnixEndAtTime();
        } else {
          setUnixEndAtTime((Integer)value);
        }
        break;

      case SPAN_IN_SECONDS:
        if (value == null) {
          unsetSpanInSeconds();
        } else {
          setSpanInSeconds((Integer)value);
        }
        break;

      case MIN_OCCURRENCE:
        if (value == null) {
          unsetMinOccurrence();
        } else {
          setMinOccurrence((Double)value);
        }
        break;

      case MIN_LENGTH:
        if (value == null) {
          unsetMinLength();
        } else {
          setMinLength((Integer)value);
        }
        break;

      case MAX_LENGTH:
        if (value == null) {
          unsetMaxLength();
        } else {
          setMaxLength((Integer)value);
        }
        break;

      case TOP:
        if (value == null) {
          unsetTop();
        } else {
          setTop((Integer)value);
        }
        break;

      case DROP_BLACKLISTED:
        if (value == null) {
          unsetDropBlacklisted();
        } else {
          setDropBlacklisted((Boolean)value);
        }
        break;

      case ONLY_WHITELISTED:
        if (value == null) {
          unsetOnlyWhitelisted();
        } else {
          setOnlyWhitelisted((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIX_END_AT_TIME:
        return Integer.valueOf(getUnixEndAtTime());

      case SPAN_IN_SECONDS:
        return Integer.valueOf(getSpanInSeconds());

      case MIN_OCCURRENCE:
        return Double.valueOf(getMinOccurrence());

      case MIN_LENGTH:
        return Integer.valueOf(getMinLength());

      case MAX_LENGTH:
        return Integer.valueOf(getMaxLength());

      case TOP:
        return Integer.valueOf(getTop());

      case DROP_BLACKLISTED:
        return Boolean.valueOf(isDropBlacklisted());

      case ONLY_WHITELISTED:
        return Boolean.valueOf(isOnlyWhitelisted());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNIX_END_AT_TIME:
        return isSetUnixEndAtTime();
      case SPAN_IN_SECONDS:
        return isSetSpanInSeconds();
      case MIN_OCCURRENCE:
        return isSetMinOccurrence();
      case MIN_LENGTH:
        return isSetMinLength();
      case MAX_LENGTH:
        return isSetMaxLength();
      case TOP:
        return isSetTop();
      case DROP_BLACKLISTED:
        return isSetDropBlacklisted();
      case ONLY_WHITELISTED:
        return isSetOnlyWhitelisted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trendsEndingAt_args)
        return this.equals((trendsEndingAt_args)that);
      return false;
    }

    public boolean equals(trendsEndingAt_args that) {
      if (that == null)
        return false;

      boolean this_present_unixEndAtTime = true;
      boolean that_present_unixEndAtTime = true;
      if (this_present_unixEndAtTime || that_present_unixEndAtTime) {
        if (!(this_present_unixEndAtTime && that_present_unixEndAtTime))
          return false;
        if (this.unixEndAtTime != that.unixEndAtTime)
          return false;
      }

      boolean this_present_spanInSeconds = true;
      boolean that_present_spanInSeconds = true;
      if (this_present_spanInSeconds || that_present_spanInSeconds) {
        if (!(this_present_spanInSeconds && that_present_spanInSeconds))
          return false;
        if (this.spanInSeconds != that.spanInSeconds)
          return false;
      }

      boolean this_present_minOccurrence = true;
      boolean that_present_minOccurrence = true;
      if (this_present_minOccurrence || that_present_minOccurrence) {
        if (!(this_present_minOccurrence && that_present_minOccurrence))
          return false;
        if (this.minOccurrence != that.minOccurrence)
          return false;
      }

      boolean this_present_minLength = true;
      boolean that_present_minLength = true;
      if (this_present_minLength || that_present_minLength) {
        if (!(this_present_minLength && that_present_minLength))
          return false;
        if (this.minLength != that.minLength)
          return false;
      }

      boolean this_present_maxLength = true;
      boolean that_present_maxLength = true;
      if (this_present_maxLength || that_present_maxLength) {
        if (!(this_present_maxLength && that_present_maxLength))
          return false;
        if (this.maxLength != that.maxLength)
          return false;
      }

      boolean this_present_top = true;
      boolean that_present_top = true;
      if (this_present_top || that_present_top) {
        if (!(this_present_top && that_present_top))
          return false;
        if (this.top != that.top)
          return false;
      }

      boolean this_present_dropBlacklisted = true;
      boolean that_present_dropBlacklisted = true;
      if (this_present_dropBlacklisted || that_present_dropBlacklisted) {
        if (!(this_present_dropBlacklisted && that_present_dropBlacklisted))
          return false;
        if (this.dropBlacklisted != that.dropBlacklisted)
          return false;
      }

      boolean this_present_onlyWhitelisted = true;
      boolean that_present_onlyWhitelisted = true;
      if (this_present_onlyWhitelisted || that_present_onlyWhitelisted) {
        if (!(this_present_onlyWhitelisted && that_present_onlyWhitelisted))
          return false;
        if (this.onlyWhitelisted != that.onlyWhitelisted)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(trendsEndingAt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      trendsEndingAt_args typedOther = (trendsEndingAt_args)other;

      lastComparison = Boolean.valueOf(isSetUnixEndAtTime()).compareTo(typedOther.isSetUnixEndAtTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnixEndAtTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unixEndAtTime, typedOther.unixEndAtTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSpanInSeconds()).compareTo(typedOther.isSetSpanInSeconds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpanInSeconds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spanInSeconds, typedOther.spanInSeconds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinOccurrence()).compareTo(typedOther.isSetMinOccurrence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinOccurrence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minOccurrence, typedOther.minOccurrence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMinLength()).compareTo(typedOther.isSetMinLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLength, typedOther.minLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaxLength()).compareTo(typedOther.isSetMaxLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxLength, typedOther.maxLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTop()).compareTo(typedOther.isSetTop());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTop()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.top, typedOther.top);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDropBlacklisted()).compareTo(typedOther.isSetDropBlacklisted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDropBlacklisted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dropBlacklisted, typedOther.dropBlacklisted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOnlyWhitelisted()).compareTo(typedOther.isSetOnlyWhitelisted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOnlyWhitelisted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlyWhitelisted, typedOther.onlyWhitelisted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("trendsEndingAt_args(");
      boolean first = true;

      sb.append("unixEndAtTime:");
      sb.append(this.unixEndAtTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spanInSeconds:");
      sb.append(this.spanInSeconds);
      first = false;
      if (!first) sb.append(", ");
      sb.append("minOccurrence:");
      sb.append(this.minOccurrence);
      first = false;
      if (!first) sb.append(", ");
      sb.append("minLength:");
      sb.append(this.minLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxLength:");
      sb.append(this.maxLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("top:");
      sb.append(this.top);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dropBlacklisted:");
      sb.append(this.dropBlacklisted);
      first = false;
      if (!first) sb.append(", ");
      sb.append("onlyWhitelisted:");
      sb.append(this.onlyWhitelisted);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class trendsEndingAt_argsStandardSchemeFactory implements SchemeFactory {
      public trendsEndingAt_argsStandardScheme getScheme() {
        return new trendsEndingAt_argsStandardScheme();
      }
    }

    private static class trendsEndingAt_argsStandardScheme extends StandardScheme<trendsEndingAt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, trendsEndingAt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIX_END_AT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.unixEndAtTime = iprot.readI32();
                struct.setUnixEndAtTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPAN_IN_SECONDS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.spanInSeconds = iprot.readI32();
                struct.setSpanInSecondsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MIN_OCCURRENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.minOccurrence = iprot.readDouble();
                struct.setMinOccurrenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MIN_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.minLength = iprot.readI32();
                struct.setMinLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MAX_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.maxLength = iprot.readI32();
                struct.setMaxLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TOP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.top = iprot.readI32();
                struct.setTopIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DROP_BLACKLISTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.dropBlacklisted = iprot.readBool();
                struct.setDropBlacklistedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // ONLY_WHITELISTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.onlyWhitelisted = iprot.readBool();
                struct.setOnlyWhitelistedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, trendsEndingAt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UNIX_END_AT_TIME_FIELD_DESC);
        oprot.writeI32(struct.unixEndAtTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SPAN_IN_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.spanInSeconds);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_OCCURRENCE_FIELD_DESC);
        oprot.writeDouble(struct.minOccurrence);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.minLength);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.maxLength);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOP_FIELD_DESC);
        oprot.writeI32(struct.top);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DROP_BLACKLISTED_FIELD_DESC);
        oprot.writeBool(struct.dropBlacklisted);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ONLY_WHITELISTED_FIELD_DESC);
        oprot.writeBool(struct.onlyWhitelisted);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class trendsEndingAt_argsTupleSchemeFactory implements SchemeFactory {
      public trendsEndingAt_argsTupleScheme getScheme() {
        return new trendsEndingAt_argsTupleScheme();
      }
    }

    private static class trendsEndingAt_argsTupleScheme extends TupleScheme<trendsEndingAt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, trendsEndingAt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnixEndAtTime()) {
          optionals.set(0);
        }
        if (struct.isSetSpanInSeconds()) {
          optionals.set(1);
        }
        if (struct.isSetMinOccurrence()) {
          optionals.set(2);
        }
        if (struct.isSetMinLength()) {
          optionals.set(3);
        }
        if (struct.isSetMaxLength()) {
          optionals.set(4);
        }
        if (struct.isSetTop()) {
          optionals.set(5);
        }
        if (struct.isSetDropBlacklisted()) {
          optionals.set(6);
        }
        if (struct.isSetOnlyWhitelisted()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetUnixEndAtTime()) {
          oprot.writeI32(struct.unixEndAtTime);
        }
        if (struct.isSetSpanInSeconds()) {
          oprot.writeI32(struct.spanInSeconds);
        }
        if (struct.isSetMinOccurrence()) {
          oprot.writeDouble(struct.minOccurrence);
        }
        if (struct.isSetMinLength()) {
          oprot.writeI32(struct.minLength);
        }
        if (struct.isSetMaxLength()) {
          oprot.writeI32(struct.maxLength);
        }
        if (struct.isSetTop()) {
          oprot.writeI32(struct.top);
        }
        if (struct.isSetDropBlacklisted()) {
          oprot.writeBool(struct.dropBlacklisted);
        }
        if (struct.isSetOnlyWhitelisted()) {
          oprot.writeBool(struct.onlyWhitelisted);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, trendsEndingAt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.unixEndAtTime = iprot.readI32();
          struct.setUnixEndAtTimeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.spanInSeconds = iprot.readI32();
          struct.setSpanInSecondsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.minOccurrence = iprot.readDouble();
          struct.setMinOccurrenceIsSet(true);
        }
        if (incoming.get(3)) {
          struct.minLength = iprot.readI32();
          struct.setMinLengthIsSet(true);
        }
        if (incoming.get(4)) {
          struct.maxLength = iprot.readI32();
          struct.setMaxLengthIsSet(true);
        }
        if (incoming.get(5)) {
          struct.top = iprot.readI32();
          struct.setTopIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dropBlacklisted = iprot.readBool();
          struct.setDropBlacklistedIsSet(true);
        }
        if (incoming.get(7)) {
          struct.onlyWhitelisted = iprot.readBool();
          struct.setOnlyWhitelistedIsSet(true);
        }
      }
    }

  }

  public static class trendsEndingAt_result implements org.apache.thrift.TBase<trendsEndingAt_result, trendsEndingAt_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("trendsEndingAt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new trendsEndingAt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new trendsEndingAt_resultTupleSchemeFactory());
    }

    public List<TrendResult> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrendResult.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(trendsEndingAt_result.class, metaDataMap);
    }

    public trendsEndingAt_result() {
    }

    public trendsEndingAt_result(
      List<TrendResult> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trendsEndingAt_result(trendsEndingAt_result other) {
      if (other.isSetSuccess()) {
        List<TrendResult> __this__success = new ArrayList<TrendResult>();
        for (TrendResult other_element : other.success) {
          __this__success.add(new TrendResult(other_element));
        }
        this.success = __this__success;
      }
    }

    public trendsEndingAt_result deepCopy() {
      return new trendsEndingAt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TrendResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TrendResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<TrendResult>();
      }
      this.success.add(elem);
    }

    public List<TrendResult> getSuccess() {
      return this.success;
    }

    public trendsEndingAt_result setSuccess(List<TrendResult> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TrendResult>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trendsEndingAt_result)
        return this.equals((trendsEndingAt_result)that);
      return false;
    }

    public boolean equals(trendsEndingAt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(trendsEndingAt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      trendsEndingAt_result typedOther = (trendsEndingAt_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("trendsEndingAt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class trendsEndingAt_resultStandardSchemeFactory implements SchemeFactory {
      public trendsEndingAt_resultStandardScheme getScheme() {
        return new trendsEndingAt_resultStandardScheme();
      }
    }

    private static class trendsEndingAt_resultStandardScheme extends StandardScheme<trendsEndingAt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, trendsEndingAt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<TrendResult>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    TrendResult _elem18; // required
                    _elem18 = new TrendResult();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, trendsEndingAt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TrendResult _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class trendsEndingAt_resultTupleSchemeFactory implements SchemeFactory {
      public trendsEndingAt_resultTupleScheme getScheme() {
        return new trendsEndingAt_resultTupleScheme();
      }
    }

    private static class trendsEndingAt_resultTupleScheme extends TupleScheme<trendsEndingAt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, trendsEndingAt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TrendResult _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, trendsEndingAt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TrendResult>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              TrendResult _elem23; // required
              _elem23 = new TrendResult();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class storeString_args implements org.apache.thrift.TBase<storeString_args, storeString_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("storeString_args");

    private static final org.apache.thrift.protocol.TField STRING_TO_STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringToStore", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UNIX_CREATED_AT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("unixCreatedAtTime", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField WEEKS_AGO_DATA_TO_EXPIRE_FIELD_DESC = new org.apache.thrift.protocol.TField("weeksAgoDataToExpire", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new storeString_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new storeString_argsTupleSchemeFactory());
    }

    public String stringToStore; // required
    public int unixCreatedAtTime; // required
    public int weeksAgoDataToExpire; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STRING_TO_STORE((short)1, "stringToStore"),
      UNIX_CREATED_AT_TIME((short)2, "unixCreatedAtTime"),
      WEEKS_AGO_DATA_TO_EXPIRE((short)3, "weeksAgoDataToExpire");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STRING_TO_STORE
            return STRING_TO_STORE;
          case 2: // UNIX_CREATED_AT_TIME
            return UNIX_CREATED_AT_TIME;
          case 3: // WEEKS_AGO_DATA_TO_EXPIRE
            return WEEKS_AGO_DATA_TO_EXPIRE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UNIXCREATEDATTIME_ISSET_ID = 0;
    private static final int __WEEKSAGODATATOEXPIRE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STRING_TO_STORE, new org.apache.thrift.meta_data.FieldMetaData("stringToStore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNIX_CREATED_AT_TIME, new org.apache.thrift.meta_data.FieldMetaData("unixCreatedAtTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WEEKS_AGO_DATA_TO_EXPIRE, new org.apache.thrift.meta_data.FieldMetaData("weeksAgoDataToExpire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(storeString_args.class, metaDataMap);
    }

    public storeString_args() {
    }

    public storeString_args(
      String stringToStore,
      int unixCreatedAtTime,
      int weeksAgoDataToExpire)
    {
      this();
      this.stringToStore = stringToStore;
      this.unixCreatedAtTime = unixCreatedAtTime;
      setUnixCreatedAtTimeIsSet(true);
      this.weeksAgoDataToExpire = weeksAgoDataToExpire;
      setWeeksAgoDataToExpireIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeString_args(storeString_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetStringToStore()) {
        this.stringToStore = other.stringToStore;
      }
      this.unixCreatedAtTime = other.unixCreatedAtTime;
      this.weeksAgoDataToExpire = other.weeksAgoDataToExpire;
    }

    public storeString_args deepCopy() {
      return new storeString_args(this);
    }

    @Override
    public void clear() {
      this.stringToStore = null;
      setUnixCreatedAtTimeIsSet(false);
      this.unixCreatedAtTime = 0;
      setWeeksAgoDataToExpireIsSet(false);
      this.weeksAgoDataToExpire = 0;
    }

    public String getStringToStore() {
      return this.stringToStore;
    }

    public storeString_args setStringToStore(String stringToStore) {
      this.stringToStore = stringToStore;
      return this;
    }

    public void unsetStringToStore() {
      this.stringToStore = null;
    }

    /** Returns true if field stringToStore is set (has been assigned a value) and false otherwise */
    public boolean isSetStringToStore() {
      return this.stringToStore != null;
    }

    public void setStringToStoreIsSet(boolean value) {
      if (!value) {
        this.stringToStore = null;
      }
    }

    public int getUnixCreatedAtTime() {
      return this.unixCreatedAtTime;
    }

    public storeString_args setUnixCreatedAtTime(int unixCreatedAtTime) {
      this.unixCreatedAtTime = unixCreatedAtTime;
      setUnixCreatedAtTimeIsSet(true);
      return this;
    }

    public void unsetUnixCreatedAtTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNIXCREATEDATTIME_ISSET_ID);
    }

    /** Returns true if field unixCreatedAtTime is set (has been assigned a value) and false otherwise */
    public boolean isSetUnixCreatedAtTime() {
      return EncodingUtils.testBit(__isset_bitfield, __UNIXCREATEDATTIME_ISSET_ID);
    }

    public void setUnixCreatedAtTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNIXCREATEDATTIME_ISSET_ID, value);
    }

    public int getWeeksAgoDataToExpire() {
      return this.weeksAgoDataToExpire;
    }

    public storeString_args setWeeksAgoDataToExpire(int weeksAgoDataToExpire) {
      this.weeksAgoDataToExpire = weeksAgoDataToExpire;
      setWeeksAgoDataToExpireIsSet(true);
      return this;
    }

    public void unsetWeeksAgoDataToExpire() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEKSAGODATATOEXPIRE_ISSET_ID);
    }

    /** Returns true if field weeksAgoDataToExpire is set (has been assigned a value) and false otherwise */
    public boolean isSetWeeksAgoDataToExpire() {
      return EncodingUtils.testBit(__isset_bitfield, __WEEKSAGODATATOEXPIRE_ISSET_ID);
    }

    public void setWeeksAgoDataToExpireIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEKSAGODATATOEXPIRE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STRING_TO_STORE:
        if (value == null) {
          unsetStringToStore();
        } else {
          setStringToStore((String)value);
        }
        break;

      case UNIX_CREATED_AT_TIME:
        if (value == null) {
          unsetUnixCreatedAtTime();
        } else {
          setUnixCreatedAtTime((Integer)value);
        }
        break;

      case WEEKS_AGO_DATA_TO_EXPIRE:
        if (value == null) {
          unsetWeeksAgoDataToExpire();
        } else {
          setWeeksAgoDataToExpire((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STRING_TO_STORE:
        return getStringToStore();

      case UNIX_CREATED_AT_TIME:
        return Integer.valueOf(getUnixCreatedAtTime());

      case WEEKS_AGO_DATA_TO_EXPIRE:
        return Integer.valueOf(getWeeksAgoDataToExpire());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STRING_TO_STORE:
        return isSetStringToStore();
      case UNIX_CREATED_AT_TIME:
        return isSetUnixCreatedAtTime();
      case WEEKS_AGO_DATA_TO_EXPIRE:
        return isSetWeeksAgoDataToExpire();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeString_args)
        return this.equals((storeString_args)that);
      return false;
    }

    public boolean equals(storeString_args that) {
      if (that == null)
        return false;

      boolean this_present_stringToStore = true && this.isSetStringToStore();
      boolean that_present_stringToStore = true && that.isSetStringToStore();
      if (this_present_stringToStore || that_present_stringToStore) {
        if (!(this_present_stringToStore && that_present_stringToStore))
          return false;
        if (!this.stringToStore.equals(that.stringToStore))
          return false;
      }

      boolean this_present_unixCreatedAtTime = true;
      boolean that_present_unixCreatedAtTime = true;
      if (this_present_unixCreatedAtTime || that_present_unixCreatedAtTime) {
        if (!(this_present_unixCreatedAtTime && that_present_unixCreatedAtTime))
          return false;
        if (this.unixCreatedAtTime != that.unixCreatedAtTime)
          return false;
      }

      boolean this_present_weeksAgoDataToExpire = true;
      boolean that_present_weeksAgoDataToExpire = true;
      if (this_present_weeksAgoDataToExpire || that_present_weeksAgoDataToExpire) {
        if (!(this_present_weeksAgoDataToExpire && that_present_weeksAgoDataToExpire))
          return false;
        if (this.weeksAgoDataToExpire != that.weeksAgoDataToExpire)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(storeString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      storeString_args typedOther = (storeString_args)other;

      lastComparison = Boolean.valueOf(isSetStringToStore()).compareTo(typedOther.isSetStringToStore());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringToStore()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringToStore, typedOther.stringToStore);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnixCreatedAtTime()).compareTo(typedOther.isSetUnixCreatedAtTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnixCreatedAtTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unixCreatedAtTime, typedOther.unixCreatedAtTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWeeksAgoDataToExpire()).compareTo(typedOther.isSetWeeksAgoDataToExpire());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeeksAgoDataToExpire()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weeksAgoDataToExpire, typedOther.weeksAgoDataToExpire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("storeString_args(");
      boolean first = true;

      sb.append("stringToStore:");
      if (this.stringToStore == null) {
        sb.append("null");
      } else {
        sb.append(this.stringToStore);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unixCreatedAtTime:");
      sb.append(this.unixCreatedAtTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("weeksAgoDataToExpire:");
      sb.append(this.weeksAgoDataToExpire);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class storeString_argsStandardSchemeFactory implements SchemeFactory {
      public storeString_argsStandardScheme getScheme() {
        return new storeString_argsStandardScheme();
      }
    }

    private static class storeString_argsStandardScheme extends StandardScheme<storeString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, storeString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STRING_TO_STORE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringToStore = iprot.readString();
                struct.setStringToStoreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIX_CREATED_AT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.unixCreatedAtTime = iprot.readI32();
                struct.setUnixCreatedAtTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WEEKS_AGO_DATA_TO_EXPIRE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.weeksAgoDataToExpire = iprot.readI32();
                struct.setWeeksAgoDataToExpireIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, storeString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.stringToStore != null) {
          oprot.writeFieldBegin(STRING_TO_STORE_FIELD_DESC);
          oprot.writeString(struct.stringToStore);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UNIX_CREATED_AT_TIME_FIELD_DESC);
        oprot.writeI32(struct.unixCreatedAtTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WEEKS_AGO_DATA_TO_EXPIRE_FIELD_DESC);
        oprot.writeI32(struct.weeksAgoDataToExpire);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class storeString_argsTupleSchemeFactory implements SchemeFactory {
      public storeString_argsTupleScheme getScheme() {
        return new storeString_argsTupleScheme();
      }
    }

    private static class storeString_argsTupleScheme extends TupleScheme<storeString_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, storeString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStringToStore()) {
          optionals.set(0);
        }
        if (struct.isSetUnixCreatedAtTime()) {
          optionals.set(1);
        }
        if (struct.isSetWeeksAgoDataToExpire()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStringToStore()) {
          oprot.writeString(struct.stringToStore);
        }
        if (struct.isSetUnixCreatedAtTime()) {
          oprot.writeI32(struct.unixCreatedAtTime);
        }
        if (struct.isSetWeeksAgoDataToExpire()) {
          oprot.writeI32(struct.weeksAgoDataToExpire);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, storeString_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.stringToStore = iprot.readString();
          struct.setStringToStoreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unixCreatedAtTime = iprot.readI32();
          struct.setUnixCreatedAtTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.weeksAgoDataToExpire = iprot.readI32();
          struct.setWeeksAgoDataToExpireIsSet(true);
        }
      }
    }

  }

}
