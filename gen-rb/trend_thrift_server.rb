#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'trends_interface_types'

module TrendServer
  module Gen
    module TrendThriftServer
      class Client
        include ::Thrift::Client

        def time()
          send_time()
          return recv_time()
        end

        def send_time()
          send_message('time', Time_args)
        end

        def recv_time()
          result = receive_message(Time_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'time failed: unknown result')
        end

        def currentTrendsDefault()
          send_currentTrendsDefault()
          return recv_currentTrendsDefault()
        end

        def send_currentTrendsDefault()
          send_message('currentTrendsDefault', CurrentTrendsDefault_args)
        end

        def recv_currentTrendsDefault()
          result = receive_message(CurrentTrendsDefault_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'currentTrendsDefault failed: unknown result')
        end

        def currentTrends(minOccurrence, minLength, maxLength, top)
          send_currentTrends(minOccurrence, minLength, maxLength, top)
          return recv_currentTrends()
        end

        def send_currentTrends(minOccurrence, minLength, maxLength, top)
          send_message('currentTrends', CurrentTrends_args, :minOccurrence => minOccurrence, :minLength => minLength, :maxLength => maxLength, :top => top)
        end

        def recv_currentTrends()
          result = receive_message(CurrentTrends_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'currentTrends failed: unknown result')
        end

        def analyzeAndStoreMorphemes(stringToParse, dropBlacklisted, onlyWhitelisted)
          send_analyzeAndStoreMorphemes(stringToParse, dropBlacklisted, onlyWhitelisted)
        end

        def send_analyzeAndStoreMorphemes(stringToParse, dropBlacklisted, onlyWhitelisted)
          send_message('analyzeAndStoreMorphemes', AnalyzeAndStoreMorphemes_args, :stringToParse => stringToParse, :dropBlacklisted => dropBlacklisted, :onlyWhitelisted => onlyWhitelisted)
        end
      end

      class Processor
        include ::Thrift::Processor

        def process_time(seqid, iprot, oprot)
          args = read_args(iprot, Time_args)
          result = Time_result.new()
          result.success = @handler.time()
          write_result(result, oprot, 'time', seqid)
        end

        def process_currentTrendsDefault(seqid, iprot, oprot)
          args = read_args(iprot, CurrentTrendsDefault_args)
          result = CurrentTrendsDefault_result.new()
          result.success = @handler.currentTrendsDefault()
          write_result(result, oprot, 'currentTrendsDefault', seqid)
        end

        def process_currentTrends(seqid, iprot, oprot)
          args = read_args(iprot, CurrentTrends_args)
          result = CurrentTrends_result.new()
          result.success = @handler.currentTrends(args.minOccurrence, args.minLength, args.maxLength, args.top)
          write_result(result, oprot, 'currentTrends', seqid)
        end

        def process_analyzeAndStoreMorphemes(seqid, iprot, oprot)
          args = read_args(iprot, AnalyzeAndStoreMorphemes_args)
          @handler.analyzeAndStoreMorphemes(args.stringToParse, args.dropBlacklisted, args.onlyWhitelisted)
          return
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Time_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Time_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CurrentTrendsDefault_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CurrentTrendsDefault_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TrendServer::Gen::TrendResult}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CurrentTrends_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MINOCCURRENCE = 1
        MINLENGTH = 2
        MAXLENGTH = 3
        TOP = 4

        FIELDS = {
          MINOCCURRENCE => {:type => ::Thrift::Types::DOUBLE, :name => 'minOccurrence'},
          MINLENGTH => {:type => ::Thrift::Types::I32, :name => 'minLength'},
          MAXLENGTH => {:type => ::Thrift::Types::I32, :name => 'maxLength'},
          TOP => {:type => ::Thrift::Types::I32, :name => 'top'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class CurrentTrends_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TrendServer::Gen::TrendResult}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnalyzeAndStoreMorphemes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        STRINGTOPARSE = 1
        DROPBLACKLISTED = 2
        ONLYWHITELISTED = 3

        FIELDS = {
          STRINGTOPARSE => {:type => ::Thrift::Types::STRING, :name => 'stringToParse'},
          DROPBLACKLISTED => {:type => ::Thrift::Types::BOOL, :name => 'dropBlacklisted'},
          ONLYWHITELISTED => {:type => ::Thrift::Types::BOOL, :name => 'onlyWhitelisted'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class AnalyzeAndStoreMorphemes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
